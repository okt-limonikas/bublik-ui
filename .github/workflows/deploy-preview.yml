name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    environment:
      name: pr-${{ github.event.pull_request.number }}
      url: https://pr-${{ github.event.pull_request.number }}.${{ vars.PREVIEW_TRAEFIK_DOMAIN }}

    concurrency:
      group: deploy-preview-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        env:
          RUNNER_TOOL_CACHE: ${{ github.workspace }}/_work/_tool
          AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/_work/_tool
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Install Ansible requirements
        run: ansible-galaxy install -r ansible/requirements.yml

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PREVIEW_SSH_PRIVATE_KEY }}" > ~/.ssh/preview
          chmod 600 ~/.ssh/preview
          ssh-keyscan -H ${{ secrets.PREVIEW_ANSIBLE_HOST }} >> ~/.ssh/known_hosts

      - name: Generate Ansible inventory
        run: |
          cat > ansible/inventory.yml << EOF
          all:
            children:
              preview_server:
                hosts:
                  preview:
                    ansible_host: ${{ secrets.PREVIEW_ANSIBLE_HOST }}
                    ansible_user: ${{ secrets.PREVIEW_ANSIBLE_USER }}
                    ansible_ssh_private_key_file: ~/.ssh/preview
                    ansible_command_timeout: 900
                    ansible_port: ${{ secrets.PREVIEW_ANSIBLE_PORT }}
          EOF

      - name: Set PR ID for workflow dispatch or PR event
        run: echo "PR_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Set Branch Variables
        run: |
          FRONTEND_BRANCH="${{ github.head_ref }}"
          backend_branch=$(echo "${{ github.event.pull_request.body }}" | grep -oiE 'backend:\s*[A-Za-z0-9._/-]+' | awk '{print $2}')
          docker_branch=$(echo "${{ github.event.pull_request.body }}" | grep -oiE 'docker:\s*[A-Za-z0-9._/-]+' | awk '{print $2}')

          if [ -z "$backend_branch" ]; then
            backend_branch="main"
          fi

          if [ -z "$docker_branch" ]; then
            docker_branch="main"
          fi

          echo "FRONTEND_BRANCH=$FRONTEND_BRANCH" >> $GITHUB_ENV
          echo "BACKEND_BRANCH=$backend_branch" >> $GITHUB_ENV
          echo "DOCKER_BRANCH=$docker_branch" >> $GITHUB_ENV

          echo "📌 Branches to checkout:"
          echo "Docker Branch: $docker_branch"
          echo "Frontend Branch: $FRONTEND_BRANCH"
          echo "Backend Branch: $backend_branch"

      - name: Create deployment status
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: `pr-${{ env.PR_ID }}`,
              description: `Deploy PR #${{ env.PR_ID }} preview`,
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              description: 'Deployment in progress',
              environment_url: `https://pr-${{ env.PR_ID }}.${{ vars.PREVIEW_TRAEFIK_DOMAIN }}`
            });

            return deployment.data.id;

      - name: Run Ansible playbook
        working-directory: ansible
        run: |
          ansible-playbook -i inventory.yml deploy-preview.yml \
            --extra-vars "pr_id=${{ env.PR_ID }}" \
            --extra-vars "traefik_domain=${{ vars.PREVIEW_TRAEFIK_DOMAIN }}" \
            --extra-vars "docker_repo=${{ vars.PREVIEW_DOCKER_REPO || 'https://github.com/ts-factory/bublik-docker' }}" \
            --extra-vars "docker_branch=${{ env.DOCKER_BRANCH || 'main' }}" \
            --extra-vars "frontend_repo=${{ vars.PREVIEW_FRONTEND_REPO || 'https://github.com/ts-factory/bublik-ui.git' }}" \
            --extra-vars "frontend_branch=${{ env.FRONTEND_BRANCH }}" \
            --extra-vars "backend_repo=${{ vars.PREVIEW_BACKEND_REPO || 'https://github.com/ts-factory/bublik.git' }}" \
            --extra-vars "backend_branch=${{ env.BACKEND_BRANCH }}" \
            --extra-vars "django_superuser_email=${{ secrets.PREVIEW_DJANGO_SUPERUSER_EMAIL }}" \
            --extra-vars "django_superuser_password=${{ secrets.PREVIEW_DJANGO_SUPERUSER_PASSWORD }}" \
            -v

      - name: Update deployment status - Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment successful',
              environment_url: `https://pr-${{ env.PR_ID }}.${{ vars.PREVIEW_TRAEFIK_DOMAIN }}`
            });

      - name: Update deployment status - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed',
              environment_url: `https://pr-${{ env.PR_ID }}.${{ vars.PREVIEW_TRAEFIK_DOMAIN }}`
            });

      - name: Deployment result comment
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: deploy-preview
          message: |
            ${{ job.status == 'success' && '✅ **Deployment successful!**' || '❌ **Deployment failed!**' }}

            ### Deployment Summary for PR #${{ env.PR_ID }}

            **Preview URL:** [https://pr-${{ env.PR_ID }}.${{ vars.PREVIEW_TRAEFIK_DOMAIN }}](https://pr-${{ env.PR_ID }}.${{ vars.PREVIEW_TRAEFIK_DOMAIN }})
            **Docker Repo:** `${{ vars.PREVIEW_DOCKER_REPO }}`
            **Docker Branch:** `${{ env.DOCKER_BRANCH }}`
            **Frontend Repo:** `${{ vars.PREVIEW_FRONTEND_REPO }}`
            **Frontend Branch:** `${{ env.FRONTEND_BRANCH }}`
            **Backend Repo:** `${{ vars.PREVIEW_BACKEND_REPO }}`
            **Backend Branch:** `${{ env.BACKEND_BRANCH }}`
            **Environment:** `pr-${{ env.PR_ID }}`

            ---
            _This comment is automatically generated by the deployment workflow._

  destroy-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest

    concurrency:
      group: destroy-preview-${{ github.event.pull_request.number }}
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        env:
          RUNNER_TOOL_CACHE: ${{ github.workspace }}/_work/_tool
          AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/_work/_tool
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Install Ansible requirements
        run: ansible-galaxy install -r ansible/requirements.yml

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PREVIEW_SSH_PRIVATE_KEY }}" > ~/.ssh/preview
          chmod 600 ~/.ssh/preview
          ssh-keyscan -H ${{ secrets.PREVIEW_ANSIBLE_HOST }} >> ~/.ssh/known_hosts

      - name: Generate Ansible inventory
        run: |
          cat > ansible/inventory.yml << EOF
          all:
            children:
              preview_server:
                hosts:
                  preview:
                    ansible_host: ${{ secrets.PREVIEW_ANSIBLE_HOST }}
                    ansible_user: ${{ secrets.PREVIEW_ANSIBLE_USER }}
                    ansible_ssh_private_key_file: ~/.ssh/preview
                    ansible_command_timeout: 900
                    ansible_port: ${{ secrets.PREVIEW_ANSIBLE_PORT }}
          EOF

      - name: Create destroy deployment status
        uses: actions/github-script@v7
        id: destroy-deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: `pr-${{ github.event.pull_request.number }}`,
              description: `Destroy PR #${{ github.event.pull_request.number }} preview`,
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              description: 'Destroying preview environment'
            });

            return deployment.data.id;

      - name: Destroy PR preview
        working-directory: ansible
        run: |
          ansible-playbook -i inventory.yml destroy-preview.yml \
            --extra-vars "pr_id=${{ github.event.pull_request.number }}" \
            -v

      - name: Update destroy deployment status - Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.destroy-deployment.outputs.result }},
              state: 'success',
              description: 'Preview environment destroyed successfully'
            });

      - name: Update destroy deployment status - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.destroy-deployment.outputs.result }},
              state: 'failure',
              description: 'Failed to destroy preview environment'
            });

      - name: Destroy result comment
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: destroy-preview
          message: |
            ${{ job.status == 'success' && '🗑️ **Preview environment destroyed successfully!**' || '❌ **Failed to destroy preview environment!**' }}

            ### Cleanup Summary for PR #${{ github.event.pull_request.number }}

            **Environment:** `pr-${{ github.event.pull_request.number }}`
            **Status:** ${{ job.status == 'success' && 'Cleaned up' || 'Cleanup failed' }}

            ---
            _This comment is automatically generated by the cleanup workflow._
